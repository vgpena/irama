{"version":3,"sources":["public/src/party.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,IAAM,IAAI,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AACzD,IAAM,QAAQ,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;AAE5C,IAAM,WAAW,GAAG,CAAC,CAAC;;AAKtB,IAAM,IAAI;AACG,WADM,QAAQ,CACb,OAAO,EAAE;0BADJ,QAAQ;;AAEvB,QAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC7C,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;;AAEvD,WAAO,IAAI,CAAC;GACb;;eAPgB,QAAQ;;WASf,oBAAC,IAAI,EAAE,KAAK,EAAE;AACtB,UAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAE9B,UAAI,OAAO,CAAC,GAAG,EAAE;AACf,YAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAC;AAChC,iBAAO,IAAI,CAAC;SACb;OACF;;AAED,UAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;AAC1B,UAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,UAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAClC,aAAO,MAAM,CAAC;KACf;;;;;WAGa,wBAAC,IAAI,EAAE;AACnB,UAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B,UAAI,UAAU,CAAC,MAAM,EAAE;AACrB,YAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,KAAK,EAAC;AAC5C,iBAAO,KAAK,CAAC;SACd;OACF,MACI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,KAAK,EAAC;AACjD,eAAO,KAAK,CAAC;OACd;AACD,aAAO,IAAI,CAAC;KACb;;;SApCgB,QAAQ;IAqC1B,CAAA;;AAOD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAC;AACnC,cAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CAC1B;;AAED,SAAS,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAC;AACpC,MAAI,GAAG,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7B,SAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAClB","file":"public/src/party.js","sourcesContent":["\"use strict\";\n\nconst data = require('../../public/data/languages.json');\nconst mappings = require('./mappings.json');\n\nconst renderLimit = 1;\n\n\n\n\nconst lang = class Language {\n  constructor(options) {\n    this.name = options.Name;\n    this.type = this.genericGet(options, \"type\");\n    this.direction = this.genericGet(options, \"direction\");\n\n    return this;\n  }\n\n  genericGet(data, field) {\n    let mapData = mappings[field];\n\n    if (mapData.iff) {\n      if (!this.shouldHaveProp(mapData)){\n        return null;\n      }\n    }\n\n    let name = mapData.mapVal;\n    let rawVal = data[name];\n    let genVal = mapData.vals[rawVal];\n    return genVal;\n  }\n\n  // TODO: rewrite to allow multiple values/clauses\n  shouldHaveProp(data) {\n    let conditions = data.iff;\n    if (conditions.tValue) {\n      if (this[conditions.key] !== conditions.value){\n        return false;\n      }\n    }\n    else if (this[conditions.key] === conditions.value){\n      return false;\n    }\n    return true;\n  }\n}\n\n\n\n\n\n\nfor (let i = 0; i < renderLimit; i++){\n  generateLang(i, data[i]);\n}\n\nfunction generateLang(index, language){\n  let foo = new lang(language);\n  console.log(foo);\n}\n"]}